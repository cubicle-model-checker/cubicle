(* type proc_type = Proc | Cluster *)
type proc_type = L1Id | CId | Neither

type cache_state = Invld | Shrd | Excl
type command = None | Get | GetX | Putt | PutX | NAck | ShWb 
              | Inv | InvAck | DxFer | WINV | WB
type data


(*-------------------- Global Network -------------------------*)
array GUniMsg_Cmd[proc] : command
array GUniMsg_Cluster[proc] : proc
array GUniMsg_Data[proc] : data
array GUniMsg_InvCnt[proc,proc] : bool (* ClusterRange *)

array GInvMsg_Cmd[proc] : command
array GInvMsg_Cluster[proc] : proc
array GInvMsg_Cluster_defined[proc] : bool

var GShWbMsg_Cmd : command
var GShWbMsg_Data : data
var GShWbMsg_Cluster : proc

var GWbMsg_Cmd : command
var GWbMsg_Data : data
var GWbMsg_Cluster : proc


(*-------------------- Global Directory -----------------------*)
var SysData : data

var GDir_State : cache_state
array GDir_ShrSet[proc] : bool
var GDir_Owner : proc
var GDir_Owner_defined : bool 
var GDir_pending : bool
var GDir_Mem : data 



(*------------------------ Clusters ---------------------------*)

array Clusters_L1s_State[proc, proc] : cache_state
array Clusters_L1s_Data[proc, proc] : data
array Clusters_L1s_Req[proc, proc] : command

array Clusters_L2_State[proc] : cache_state
array Clusters_L2_Data[proc] : data
array Clusters_L2_pending[proc] : bool

array Clusters_OnlyCopy[proc] : bool

array Clusters_ifInReq[proc] : bool
array Clusters_ReqCmd[proc] : command

array Clusters_ifOutRpy[proc] : bool
array Clusters_outRpy_Cmd[proc] : command
array Clusters_outRpy_Data[proc] : data

array Clusters_ifOutReq[proc] : bool
array Clusters_outReq_Cmd[proc] : command
array Clusters_outReq_Cluster[proc] : proc

array Clusters_ifInRpy[proc] : bool
array Clusters_inRpy_Cmd[proc] : command
array Clusters_inRpy_Data[proc] : data
array Clusters_inRpy_Dest[proc] : proc

array Clusters_WbReq_Cmd[proc] : command
array Clusters_WbReq_Data[proc] : data

array Clusters_RAC_Cmd[proc] : command
array Clusters_RAC_InvCnt[proc,proc] : bool (* ClusterRange *)


array Sort[proc] : proc_type


init (c i) {
     Sort[c] = Neither && 
    (* Sort[c] = Cluster && Sort[i] = Proc => *)
    Clusters_L1s_State[c,i] = Invld &&
    Clusters_L1s_Req[c,i] = None &&

    Clusters_L2_State[c] = Invld &&
    Clusters_L2_pending[c] = False &&
    Clusters_OnlyCopy[c] = False &&

    Clusters_ifInReq[c] = False &&
    Clusters_ReqCmd[c] = None &&
    Clusters_ifOutRpy[c] = False &&
    Clusters_outRpy_Cmd[c] = None &&

    Clusters_ifOutReq[c] = False &&
    Clusters_outReq_Cmd[c] = None &&
    Clusters_ifInRpy[c] = False &&
    Clusters_inRpy_Cmd[c] = None &&
    Clusters_WbReq_Cmd[c] = None &&

    Clusters_RAC_Cmd[c] = None &&
    (* Clusters_RAC_InvCnt[c] = 0 && *)
    Clusters_RAC_InvCnt[c,i] = False &&

    GUniMsg_Cmd[c] = None &&
    (* GUniMsg_InvCnt[c] = 0 && *)
    GUniMsg_InvCnt[c,i] = False &&

    GInvMsg_Cmd[c] = None &&
    GInvMsg_Cluster_defined[c] = False &&

  GShWbMsg_Cmd = None &&
  GWbMsg_Cmd = None &&

  (* SysData = d && *)
  (* GDir_Mem = d && *)
  SysData = GDir_Mem &&
  (* undefine GDir.Owner; *)
  GDir_Owner_defined = False &&

  GDir_State = Invld &&
  GDir_pending = False &&
  GDir_ShrSet[c] = False
}



(* invariant "I1" *)
unsafe (c i j) {
       Sort[c] = CId && Sort[i] = L1Id && Sort[j] = L1Id &&
       Clusters_L1s_State[c,i] = Excl && Clusters_L1s_State[c,j] = Excl
}

unsafe (c i) {
       Sort[c] = CId && Sort[i] = L1Id &&
       Clusters_L2_State[c] = Excl && Clusters_L1s_State[c,i] = Excl
}


(* invariant "I2" *)
unsafe (c1 c2 i j) {
       Sort[c1] = CId && Sort[c2] = CId && Sort[i] = L1Id && Sort[j] = L1Id &&
       Clusters_L1s_State[c1,i] = Excl && Clusters_L1s_State[c2,j] = Excl
}

unsafe (c1 c2 i) {
       Sort[c1] = CId && Sort[c2] = CId && Sort[i] = L1Id &&
       Clusters_L2_State[c1] = Excl && Clusters_L1s_State[c2,i] = Excl
}

unsafe (c1 c2) {
       Sort[c1] = CId && Sort[c2] = CId &&
       Clusters_L2_State[c1] = Excl && Clusters_L2_State[c2] = Excl
}


(* invariant "I3" *)
unsafe () { GDir_State = Shrd && GDir_Mem <> SysData }


(* invariant "I4" *)
unsafe (c i) { 
       Sort[c] = CId && Sort[i] = L1Id &&
       Clusters_L1s_State[c,i] = Excl && Clusters_L1s_Data[c,i] <> SysData
}
(* THIS ONE
unsafe (c) {
       Sort[c] = CId && 
       Clusters_L2_State[c] = Excl && Clusters_L2_Data[c] <> SysData
}*)

unsafe (c) {
       Sort[c] = CId && 
       Clusters_L2_State[c] = Excl && Clusters_L2_Data[c] <> SysData
}


(*
transition set_cluster (c)
requires { Sort[c] = Neither }
{ Sort[c] := CId}


transition set_id (c)
requires { Sort[c] = Neither }
{ Sort[c] := L1Id}
*)

(*------------ Murphi rule "1 L1 cache update cache" ----------*)
transition t1 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_State[c,i] = Excl }
{
  Clusters_L1s_Data[c,i] := SysData;
  SysData := .;
}


(*------------ Murphi rule "2 L1 cache write back cache" ------*)
transition t2 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_State[c,i] = Excl }
{

  Clusters_L2_State[c] := Excl;
  Clusters_L2_Data[c] := Clusters_L1s_Data[c,i];

  Clusters_L1s_State[c,i] := Invld;
  (* undefine Clusters_L1s_Data[c,i]; *)
}



(*------------ Murphi rule "3 L1 req shrd copy" --------------*)
transition t3 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_State[c,i] = Invld &&
           Clusters_L1s_Req[c,i] = None }
{
  Clusters_L1s_Req[c,i] := Get;
}


(*------------ Murphi rule "4 L1 req excl copy" -------------*)
transition t4 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_State[c,i] <> Excl &&
           Clusters_L1s_Req[c,i] = None }
{
  Clusters_L1s_Req[c,i] := GetX;
}



(*--- Murphi rule "5 L1 req copy, cluster invld, fwd outside" ---*)
transition t5_1 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = Get &&
           
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False &&
	   forall_other j. (Sort[j] = CId) }
{
  Clusters_L2_pending[c] := True;
  Clusters_ifInReq[c] := True;
  Clusters_ReqCmd[c] := Clusters_L1s_Req[c,i];

  Clusters_L1s_Req[c,i] := None;
}

transition t5_2 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = Get &&
          
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False &&
	   forall_other j. (Clusters_L1s_State[c,j] = Invld) }
{
  Clusters_L2_pending[c] := True;
  Clusters_ifInReq[c] := True;
  Clusters_ReqCmd[c] := Clusters_L1s_Req[c,i];

  Clusters_L1s_Req[c,i] := None;
}

transition t5_x_1 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False &&
	   forall_other j. (Sort[j] = CId) }
{
  Clusters_L2_pending[c] := True;
  Clusters_ifInReq[c] := True;
  Clusters_ReqCmd[c] := Clusters_L1s_Req[c,i];

  Clusters_L1s_Req[c,i] := None;
}

transition t5_x_2 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False &&
	   forall_other j. (Clusters_L1s_State[c,j] = Invld) }
{
  Clusters_L2_pending[c] := True;
  Clusters_ifInReq[c] := True;
  Clusters_ReqCmd[c] := Clusters_L1s_Req[c,i];

  Clusters_L1s_Req[c,i] := None;
}


(*----------- Murphi rule "6 L1 req copy, cluster busy, NAck" ------*)
transition t6 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = Get &&
           Clusters_L2_pending[c] = True }
{
  Clusters_L1s_Req[c,i] := None;
}

transition t6_x (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           Clusters_L2_pending[c] = True }
{
  Clusters_L1s_Req[c,i] := None;
}



(*----------- Murphi rule "7 L1 req shrd copy, L2 reply" ----------*)
transition t7 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = Get &&
           Clusters_L2_State[c] = Shrd &&
           Clusters_L2_pending[c] = False }
{
  Clusters_L1s_State[c,i] := Shrd;
  Clusters_L1s_Data[c,i] := Clusters_L2_Data[c];
  Clusters_L1s_Req[c,i] := None;
}


(*------- Murphi rule "8 L1 req shrd copy, another L1 reply" ----*)
transition t8 (c i j)
requires { Sort[c] = CId && Sort[i] = L1Id && Sort[j] = L1Id &&
           Clusters_L1s_Req[c,i] = Get &&
           Clusters_L1s_State[c,j] = Shrd &&
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False }
{
  Clusters_L1s_State[c,i] := Shrd;
  Clusters_L1s_Data[c,i] := Clusters_L1s_Data[c,j];
  Clusters_L1s_Req[c,i] := None;
}


(*------- Murphi rule "9 L1 req excl copy, L2 reply" --------*)
transition t9 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           Clusters_L2_State[c] = Excl &&
           Clusters_L2_pending[c] = False }  
{
  Clusters_L1s_State[c,i] := Excl;
  Clusters_L1s_Data[c,i] := Clusters_L2_Data[c];
  Clusters_L1s_Req[c,i] := None;

  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)
}



(*------- Murphi rule "10 L1 req excl copy, another L1 reply" ------*)
transition t10 (c i j)
requires { Sort[c] = CId && Sort[i] = L1Id && Sort[j] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           Clusters_L1s_State[c,j] = Excl &&
           Clusters_L2_State[c] = Invld &&
           Clusters_L2_pending[c] = False }
{
  Clusters_L1s_State[oc,x] := case
                              | oc = c && x = i : Excl
                              | oc = c && x = j : Invld
                              | _ : Clusters_L1s_State[oc,x];
  Clusters_L1s_Data[c,i] := Clusters_L1s_Data[c,j];
  Clusters_L1s_Req[c,i] := None;


  (* undefine Clusters_L1s_Data[c,i]; *)
}



(*------- Murphi rule "11 L1 req excl copy, L2 reply" ---------*)
transition t11 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           Clusters_L2_State[c] = Shrd &&
           Clusters_OnlyCopy[c] = True &&
           Clusters_L2_pending[c] = False }
{  
  Clusters_L1s_State[oc,j] := case
                            | oc = c && j <> i : Invld
                            | oc = c && j = i : Excl
                            (* undefine Clusters[c]_L1s[j]_Data; *)
                            | _ : Clusters_L1s_State[oc,j];

  Clusters_L1s_Data[c,i] := Clusters_L2_Data[c];
  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)
}



(*------- Murphi rule "12 L1 req excl copy, cluster fwd outside" ----*)
transition t12 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_L1s_Req[c,i] = GetX &&
           Clusters_OnlyCopy[c] = False &&
           Clusters_L2_pending[c] = False }
{
  Clusters_L1s_State[oc,j] :=
    case | oc = c && Clusters_L1s_State[oc,j] = Shrd : Invld
      (* undefine Clusters[c]_L1s[j]_Data; *)
         | _ : Clusters_L1s_State[oc,j];

  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)

  Clusters_L2_pending[c] := True;
  Clusters_ifInReq[c] := True;
  Clusters_ReqCmd[c] := Clusters_L1s_Req[c,i];
  Clusters_L1s_Req[c,i] := None;
}


(*------- Murphi rule "13 Cluster sends req to global dir" -----*)
transition t13 (c)
requires { Sort[c] = CId &&
           Clusters_ifInReq[c] = True &&
           Clusters_RAC_Cmd[c] = None &&
           Clusters_WbReq_Cmd[c] = None }
{
  Clusters_RAC_Cmd[c] := Clusters_ReqCmd[c];
  GUniMsg_Cmd[c] := Clusters_ReqCmd[c];
  GUniMsg_Cluster[c] := c;

  Clusters_ifInReq[c] := False;
}



(*------- Murphi rule "14 global dir reply cluster shrd req" -------*)
transition t14 (c)
requires { Sort[c] = CId &&
         GUniMsg_Cmd[c] = Get &&
         GUniMsg_Cluster[c] = c &&
         GDir_State <> Excl &&
         GDir_pending = False }
{
  GUniMsg_Cmd[c] := Putt;
  GUniMsg_Data[c] := GDir_Mem;
  GDir_ShrSet[c] := True;
  GDir_State := Shrd;
}


(*------- Murphi rule "15 global dir reply cluster excl req" ------*)
transition t15 (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = GetX &&
           GUniMsg_Cluster[c] = c &&
           GDir_State = Invld &&
           GDir_pending = False }
{
  GUniMsg_Cmd[c] := PutX;
  GUniMsg_Data[c] := GDir_Mem;
  GUniMsg_InvCnt[oc,x] := case | oc = c : False | _ : GUniMsg_InvCnt[oc,x];
  GDir_Owner := c;
  GDir_State := Excl;
}



(*------- Murphi rule "16 global dir fwd req to owner cluster" -----------*)
transition t16_o (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = Get &&
           GUniMsg_Cluster[c] = c &&
           GDir_State = Excl &&
           GDir_pending = False &&
           GDir_Owner = c }
{
  GUniMsg_Cmd[c] := NAck;
  (* undefine GUniMsg_Cluster[c]; *)
}

transition t16_no (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = Get &&
           GUniMsg_Cluster[c] = c &&
           GDir_State = Excl &&
           GDir_pending = False &&
           GDir_Owner <> c }
{
  GDir_pending := True;
  GUniMsg_Cluster[c] := GDir_Owner;
}

transition t16_x_o (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = GetX &&
           GUniMsg_Cluster[c] = c &&
           GDir_State = Excl &&
           GDir_pending = False &&
           GDir_Owner = c }
{
  GUniMsg_Cmd[c] := NAck;
  (* undefine GUniMsg_Cluster[c]; *)
}

transition t16_x_no (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = GetX &&
           GUniMsg_Cluster[c] = c &&
           GDir_State = Excl &&
           GDir_pending = False &&
           GDir_Owner <> c }
{
  GDir_pending := True;
  GUniMsg_Cluster[c] := GDir_Owner;
}



(*------- Murphi rule "17 Cluster c2 busy, NAck c1's req" -------------*)
transition t17 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GUniMsg_Cmd[c1] = Get &&
           GUniMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] <> None }
{
  GUniMsg_Cmd[c1] := NAck;
  (* undefine GUniMsg_Cluster[c1]; *)
  (* undefine GUniMsg_Data[c1]; *)

  GShWbMsg_Cmd := NAck;
  (* undefine GShWbMsg_Cluster; *)
  (* undefine GShWbMsg_Data; *)
}

transition t17_x (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GUniMsg_Cmd[c1] = GetX &&
           GUniMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] <> None }
{
  GUniMsg_Cmd[c1] := NAck;
  (* undefine GUniMsg_Cluster[c1]; *)
  (* undefine GUniMsg_Data[c1]; *)

  GShWbMsg_Cmd := NAck;
  (* undefine GShWbMsg_Cluster; *)
  (* undefine GShWbMsg_Data; *)
}




(*------- Murphi rule "18 Global dir receive NAck"----------*)
transition t18 ()
 requires { GShWbMsg_Cmd = NAck && GDir_pending = True }
{
  GShWbMsg_Cmd := None;
  GDir_pending := False;
}


(*------- Murphi rule "19 Cluster c2 takes c1's req" ----------*)
transition t19 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GUniMsg_Cmd[c1] = Get &&
           GUniMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = None }
{
  Clusters_outReq_Cmd[c2] := GUniMsg_Cmd[c1];
  Clusters_outReq_Cluster[c2] := c1;

  GUniMsg_Cmd[c1] := None;
  (* undefine GUniMsg_Cluster[c1]; *)
  (* undefine GUniMsg_Data[c1]; *)
}

transition t19_x (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GUniMsg_Cmd[c1] = GetX &&
           GUniMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = None }
{
  Clusters_outReq_Cmd[c2] := GUniMsg_Cmd[c1];
  Clusters_outReq_Cluster[c2] := c1;

  GUniMsg_Cmd[c1] := None;
  (* undefine GUniMsg_Cluster[c1]; *)
  (* undefine GUniMsg_Data[c1]; *)
}


(*------- Murphi rule "20 Cluster busy, NAck outside req" ----------*)
transition t20 (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = Get &&
           Clusters_L2_pending[c] = True }
{
  Clusters_inRpy_Cmd[c] := NAck;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  (* undefine Clusters_inRpy_Data[c]; *)

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}

transition t20_x (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = GetX &&
           Clusters_L2_pending[c] = True }
{
  Clusters_inRpy_Cmd[c] := NAck;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  (* undefine Clusters_inRpy_Data[c]; *)

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}


(*------- Murphi rule "21 Cluster reply fwd req by Put" ----------*)
transition t21 (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = Get &&
           Clusters_L2_pending[c] = False &&
           Clusters_L2_State[c] = Shrd }
{
  Clusters_inRpy_Cmd[c] := Putt;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  Clusters_inRpy_Data[c] := Clusters_L2_Data[c];

  (* assert Clusters_OnlyCopy[c] = True; *)
  Clusters_OnlyCopy[c] := False;

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}



(*------- Murphi rule "22 Cluster reply fwd req by PutX1" ----------*)
transition t21_1 (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = GetX &&
           Clusters_L2_pending[c] = False &&
           Clusters_L2_State[c] = Excl }
{
  Clusters_inRpy_Cmd[c] := PutX;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  Clusters_inRpy_Data[c] := Clusters_L2_Data[c];

  (* assert Clusters_OnlyCopy[c] = True; *)
  Clusters_OnlyCopy[c] := False;
  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}



(*------- Murphi rule "23 Cluster reply fwd req by PutX2"------*)
transition t23 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_outReq_Cmd[c] = GetX &&
           Clusters_L2_pending[c] = False &&
           Clusters_L2_State[c] = Invld &&
           Clusters_L1s_State[c,i] = Excl }
{
  Clusters_inRpy_Cmd[c] := PutX;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  Clusters_inRpy_Data[c] := Clusters_L1s_Data[c,i];

  (* assert Clusters_OnlyCopy[c] = True; *)
  Clusters_OnlyCopy[c] := False;
  Clusters_L1s_State[c,i] := Invld;
  (* undefine Clusters_L1s_Data[c,i]; *)

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}



(*------- Murphi rule "24 Cluster reply fwd req by PutX3" ----------*)
transition t24 (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = GetX &&
           Clusters_L2_pending[c] = False &&
           Clusters_L2_State[c] = Shrd }
{
  Clusters_inRpy_Cmd[c] := PutX;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  Clusters_inRpy_Data[c] := Clusters_L2_Data[c];

  (* assert Clusters_OnlyCopy[c] = True; *)
  Clusters_OnlyCopy[c] := False;
  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)

  Clusters_L1s_State[oc,i] := case
                               | oc = c : Invld
                               (* undefine Clusters_L1s_Data[c,i]; *)
                               | _ : Clusters_L1s_State[oc,i];

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}



(*------- Murphi rule "25 Cluster reply fwd req by Put" ------*)
transition t25 (c i)
requires { Sort[c] = CId && Sort[i] = L1Id &&
           Clusters_outReq_Cmd[c] = Get &&
           Clusters_L2_pending[c] = False &&
           Clusters_L2_State[c] = Invld &&
           Clusters_L1s_State[c,i] = Shrd }
{
  Clusters_inRpy_Cmd[c] := Putt;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  Clusters_inRpy_Data[c] := Clusters_L1s_Data[c,i];

  (* assert Clusters_OnlyCopy[c] = True; *)
  Clusters_OnlyCopy[c] := False;

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}


(*------- Murphi rule "26 cluster send Put reply to another cluster" -----*)
transition t26 (c dest)
requires { Sort[c] = CId && Sort[dest] = CId &&
           Clusters_inRpy_Cmd[c] = Putt &&
           Clusters_inRpy_Dest[c] = dest }
{
  GShWbMsg_Cmd := ShWb;
  GShWbMsg_Data := Clusters_inRpy_Data[c];
  GShWbMsg_Cluster := dest;

  GUniMsg_Cmd[dest] := Putt;
  GUniMsg_Data[dest] := Clusters_inRpy_Data[c];
  (* undefine GUniMsg_Cluster[dest]; *)

  Clusters_inRpy_Cmd[c] := None;
  (* undefine Clusters_inRpy_Dest[c]; *)
}


(*------- Murphi rule "27 Cluster reply fwded excl req" -----*)
transition t27 (c dest)
requires { Sort[c] = CId && Sort[dest] = CId &&
           Clusters_inRpy_Cmd[c] = PutX &&
           Clusters_inRpy_Dest[c] = dest }
{
  GShWbMsg_Cmd := DxFer;
  (* undefine GShWbMsg_Data; *)
  GShWbMsg_Cluster := dest;

  GUniMsg_Cmd[dest] := PutX;
  GUniMsg_Data[dest] := Clusters_inRpy_Data[c];
  (* GUniMsg_InvCnt[dest] := 0; *)
  GUniMsg_InvCnt[x,y] := case | x = dest : False | _ : GUniMsg_InvCnt[x,y];

  Clusters_inRpy_Cmd[c] := None;
  (* undefine Clusters_inRpy_Dest[c]; *)
}



(*------- Murphi rule "28 Global dir receive ShWb" -----*)
transition t28_o (c gd)
requires { Sort[c] = CId && Sort[gd] = CId && 
           GShWbMsg_Cmd = ShWb  &&
           GShWbMsg_Cluster = c &&
           GDir_Owner_defined = True &&
           GDir_Owner = gd }
{
  GDir_State := Shrd;

  (* assert GDir_pending = True; *)
  GDir_pending := False;
  GDir_Mem := GShWbMsg_Data;
  GDir_ShrSet[oc] := case | oc = c : True | oc = gd : True;
  GDir_Owner_defined := False;

  (* GShWbMsg_Cmd := None; *)
  (* undefine GShWbMsg_Data; *)
  (* undefine GShWbMsg_Cluster; *)
}

transition t28_same (c)
requires { Sort[c] = CId &&
           GShWbMsg_Cmd = ShWb  &&
           GShWbMsg_Cluster = c &&
           GDir_Owner_defined = True &&
           GDir_Owner = c }
{
  GDir_State := Shrd;

  (* assert GDir_pending = True; *)
  GDir_pending := False;
  GDir_Mem := GShWbMsg_Data;
  GDir_ShrSet[c] := True;
  GDir_Owner_defined := False;

  (* GShWbMsg_Cmd := None; *)
  (* undefine GShWbMsg_Data; *)
  (* undefine GShWbMsg_Cluster; *)
}

transition t28_no (c)
requires { Sort[c] = CId &&
           GShWbMsg_Cmd = ShWb  &&
           GShWbMsg_Cluster = c &&
           GDir_Owner_defined = False }
{
  GDir_State := Shrd;

  (* assert GDir_pending = True; *)
  GDir_pending := False;
  GDir_Mem := GShWbMsg_Data;
  GDir_ShrSet[c] := True;

  (* GShWbMsg_Cmd := None; *)
  (* undefine GShWbMsg_Data; *)
  (* undefine GShWbMsg_Cluster; *)
}


(*------- Murphi rule "29 Global dir receive DxFer" -----*)
transition t29 ()
requires { GShWbMsg_Cmd = DxFer }
{
  (* assert GDir_pending = True; *)
  GDir_pending := False;

  GDir_Owner := GShWbMsg_Cluster;

  GShWbMsg_Cmd := None;
  (* undefine GShWbMsg_Data; *)
  (* undefine GShWbMsg_Cluster; *)
}



(*------- Murphi rule "30 Cluster c1 sends NAck rpy to c2"-----*)
transition t30 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId && 
           Clusters_inRpy_Cmd[c1] = NAck &&
           Clusters_inRpy_Dest[c1] = c2 }
{
  GUniMsg_Cmd[c2] := NAck;
  (* undefine GUniMsg_Data[c2]; *)
  (* undefine GUniMsg_Cluster[c2]; *)

  (* Clusters_inRpy_Cmd[c1] := None; *)
  (* undefine Clusters_inRpy_Dest[c1]; *)

  GShWbMsg_Cmd := NAck;
  (* undefine GShWbMsg_Cluster; *)
  (* undefine GShWbMsg_Data; *)
}


(*------- Murphi rule "31 Cluster receive NAck reply" -----*)
transition t31 (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = NAck }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := NAck;

  GUniMsg_Cmd[c] := None;
  Clusters_ReqCmd[c] := None;
}



(*------- Murphi rule "32 Cluster receive Put reply" -----*)
transition t32 (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = Putt   }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}



(*------- Murphi rule "33 Cluster receive PutX reply" -----*)
transition t33_then_1 (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,c] = False &&
           forall_other i. (Sort[i] = L1Id) }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}

transition t33_then_2 (c)
requires { Sort[c] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,c] = False &&
           forall_other i. (GUniMsg_InvCnt[c,i] = False) }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}

transition t33_else_then1 (c o)
requires { Sort[c] = CId && Sort[o] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,o] = True &&
           Clusters_RAC_InvCnt[c,o] = False }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)

  (* Clusters_RAC_InvCnt[c] := GUniMsg_InvCnt[c] - Clusters_RAC_InvCnt[c]; *)
  Clusters_RAC_InvCnt[x,y] := case
     | x = c && 
       GUniMsg_InvCnt[c,y] = True && 
       Clusters_RAC_InvCnt[c,y] = False : True
     | x = c : False
     | _ : Clusters_RAC_InvCnt[x,y];

  Clusters_RAC_Cmd[c] := WINV;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}

transition t33_else_then2 (c o p)
requires { Sort[c] = CId && Sort[o] = CId && Sort[p] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,o] = True &&
           GUniMsg_InvCnt[c,p] = True &&
           Clusters_RAC_InvCnt[c,p] = False }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)

  (* Clusters_RAC_InvCnt[c] := GUniMsg_InvCnt[c] - Clusters_RAC_InvCnt[c]; *)
  Clusters_RAC_InvCnt[x,y] := case
     | x = c && 
       GUniMsg_InvCnt[c,y] = True && 
       Clusters_RAC_InvCnt[c,y] = False : True
     | x = c : False
     | _ : Clusters_RAC_InvCnt[x,y];

  Clusters_RAC_Cmd[c] := WINV;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}


transition t33_else_else_1 (c o)
requires { Sort[c] = CId && Sort[o] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,o] = True &&
           forall_other j. 
             (Sort[j] = L1Id ) }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}

transition t33_else_else_2 (c o)
requires { Sort[c] = CId && Sort[o] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,o] = True &&
           forall_other j. 
             (
              GUniMsg_InvCnt[c,j] = False) }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}


transition t33_else_else_3 (c o)
requires { Sort[c] = CId && Sort[o] = CId &&
           GUniMsg_Cmd[c] = PutX &&
           GUniMsg_InvCnt[c,o] = True &&
           forall_other j. 
             (
              Clusters_RAC_InvCnt[c,j] = True) }
{
  (* assert Clusters_RAC_Cmd[c] <> None; *)
  Clusters_RAC_Cmd[c] := None;

  Clusters_outRpy_Cmd[c] := GUniMsg_Cmd[c];
  Clusters_outRpy_Data[c] := GUniMsg_Data[c];

  GUniMsg_Cmd[c] := None;
  (* undefine GUniMsg_Data[c]; *)
  Clusters_ReqCmd[c] := None;
}





(*------- Murphi rule "34 Cluster receive NAck, reset pending" -----*)
transition t34 (c)
requires { Sort[c] = CId &&
           Clusters_outRpy_Cmd[c] = NAck }
{
  (* assert Clusters_L2_pending[c] = True; *)
  Clusters_L2_pending[c] := False;

  Clusters_outRpy_Cmd[c] := None;
}




(*------- Murphi rule "35 Cluster receive Put reply" -----*)
transition t35 (c)
requires { Sort[c] = CId &&
           Clusters_outRpy_Cmd[c] = Putt }
{
  (* assert Clusters_L2_pending[c] = True; *)
  Clusters_L2_pending[c] := False;

  Clusters_L2_Data[c] := Clusters_outRpy_Data[c];
  Clusters_L2_State[c] := Shrd;
  Clusters_OnlyCopy[c] := False;

  Clusters_outRpy_Cmd[c] := None;
}



(*------- Murphi rule "36 Cluster receive PutX reply" -----*)
transition t36 (c)
requires { Sort[c] = CId &&
           Clusters_outRpy_Cmd[c] = PutX }
{
  (* assert Clusters_L2_pending[c] = True; *)
  Clusters_L2_pending[c] := False;

  Clusters_L2_Data[c] := Clusters_outRpy_Data[c];
  Clusters_L2_State[c] := Excl;
  Clusters_OnlyCopy[c] := True;

  Clusters_outRpy_Cmd[c] := None;
}



(*------- Murphi rule "37 Cluster req excl copy, global dir shrd" -----*)
transition t37 (c i)
requires { Sort[c] = CId && Sort[i] = CId &&
           GUniMsg_Cmd[c] = GetX &&
           GDir_pending = False &&
           GDir_State = Shrd &&
           GDir_ShrSet[i] = True }
{
  GUniMsg_Cmd[c] := PutX;
  GUniMsg_Data[c] := GDir_Mem;
  GDir_State := Excl;
  GDir_Owner := c;

  GDir_ShrSet[y] := case
                    | Sort[y] = CId && GDir_ShrSet[y] = True : False
                    | _ : GDir_ShrSet[y];
  GInvMsg_Cmd[y] := case
                    | Sort[y] = CId && GDir_ShrSet[y] = True && y <> c : Inv
                    | _ : GInvMsg_Cmd[y];
  GInvMsg_Cluster[y] := case
                    | Sort[y] = CId && GDir_ShrSet[y] = True && y <> c : c
                    | _ : GInvMsg_Cluster[y];
  GUniMsg_InvCnt[oc,y] := case
     | oc = c && Sort[y] = CId && GDir_ShrSet[y] = True && y <> c : True
     | oc = c : False
     | _ : GUniMsg_InvCnt[oc,y];
}



(*------- Murphi rule "38 Cluster receive Inv" -----*)
transition t38 (c)
requires { Sort[c] = CId &&
           GInvMsg_Cmd[c] = Inv }
{
  GInvMsg_Cmd[c] := None;
  Clusters_outReq_Cmd[c] := Inv;
  Clusters_outReq_Cluster[c] := GInvMsg_Cluster[c];
}



(*------- Murphi rule "38-1 Cluster reply InvAck" -----*)
transition t38_1 (c)
requires { Sort[c] = CId &&
           Clusters_inRpy_Cmd[c] = InvAck }
{
  GInvMsg_Cmd[c] := InvAck;
  GInvMsg_Cluster[c] := Clusters_inRpy_Dest[c];

  Clusters_inRpy_Cmd[c] := None;
  (* undefine Clusters_inRpy_Dest[c]; *)
}



(*------- Murphi rule "39 Cluster receive InvAck" -----*)
transition t39 (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster_defined[c1] = True &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] <> WINV &&
           Clusters_RAC_InvCnt[c2,y] = False }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] + 1; *)
  Clusters_RAC_InvCnt[c2,y] := True; 
  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t39_c1 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster_defined[c1] = True &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] <> WINV &&
           Clusters_RAC_InvCnt[c2,c1] = False }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] + 1; *)
  Clusters_RAC_InvCnt[c2,c1] := True; 
  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t39_c2 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster_defined[c1] = True &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] <> WINV &&
           Clusters_RAC_InvCnt[c2,c2] = False }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] + 1; *)
  Clusters_RAC_InvCnt[c2,c2] := True; 
  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}



(*------- Murphi rule "40 Cluster receive InvAck" -----*)
transition t40_last (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,y] = True &&
           Clusters_RAC_InvCnt[c2,c1] = False &&
           Clusters_RAC_InvCnt[c2,c2] = False &&
           forall_other j. (Sort[j] <> CId ||
                            Clusters_RAC_InvCnt[c2,j] = False) }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,y] := False;
  Clusters_RAC_Cmd[c2] := None;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_last_c1 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = True &&
           Clusters_RAC_InvCnt[c2,c2] = False &&
           forall_other j. (Sort[j] <> CId ||
                            Clusters_RAC_InvCnt[c2,j] = False) }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c1] := False;
  Clusters_RAC_Cmd[c2] := None;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_last_c2_1 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = False &&
           Clusters_RAC_InvCnt[c2,c2] = True &&
           forall_other j. (Sort[j] <> CId ) }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c2] := False;
  Clusters_RAC_Cmd[c2] := None;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_last_c2_2 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = False &&
           Clusters_RAC_InvCnt[c2,c2] = True &&
           forall_other j. (
                            Clusters_RAC_InvCnt[c2,j] = False) }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c2] := False;
  Clusters_RAC_Cmd[c2] := None;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}


transition t40_more_c1 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = True &&
           Clusters_RAC_InvCnt[c2,c2] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c1] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}


transition t40_more_c2 (c1 c2)
requires { Sort[c1] = CId && Sort[c2] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = True &&
           Clusters_RAC_InvCnt[c2,c2] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c2] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}


transition t40_more_1 (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = True &&
           Clusters_RAC_InvCnt[c2,c2] = False &&
           Clusters_RAC_InvCnt[c2,y] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,y] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_more_2 (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = True &&
           Clusters_RAC_InvCnt[c2,c2] = False &&
           Clusters_RAC_InvCnt[c2,y] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c1] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_more_3 (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = False &&
           Clusters_RAC_InvCnt[c2,c2] = True &&
           Clusters_RAC_InvCnt[c2,y] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,y] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}

transition t40_more_4 (c1 c2 y)
requires { Sort[c1] = CId && Sort[c2] = CId && Sort[y] = CId &&
           GInvMsg_Cmd[c1] = InvAck &&
           GInvMsg_Cluster[c1] = c2 &&
           Clusters_RAC_Cmd[c2] = WINV &&
           Clusters_RAC_InvCnt[c2,c1] = False &&
           Clusters_RAC_InvCnt[c2,c2] = True &&
           Clusters_RAC_InvCnt[c2,y] = True }
{
  (* Clusters_RAC_InvCnt[c2] := Clusters_RAC_InvCnt[c2] - 1; *)
  Clusters_RAC_InvCnt[c2,c2] := False;

  GInvMsg_Cmd[c1] := None;
  (* undefine GInvMsg_Cluster[c1]; *)
  GInvMsg_Cluster_defined[c1] := False;
}




(*------- Murphi rule "41 Cluster write back cache copy" -----*)
transition t41 (c)
requires { Sort[c] = CId &&
           Clusters_L2_State[c] = Excl &&
           Clusters_L2_pending[c] = False }
{
  Clusters_WbReq_Cmd[c] := WB;
  Clusters_WbReq_Data[c] := Clusters_L2_Data[c];
  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)
  Clusters_OnlyCopy[c] := False;
}



(*------- Murphi rule "42 Cluster write back cache copy" -----*)
transition t42 (c)
requires { Sort[c] = CId &&
           Clusters_WbReq_Cmd[c] = WB 
           (* comment the following is our inserted bug *)
           && Clusters_RAC_Cmd[c] = None }
{
  GWbMsg_Cmd := WB;
  GWbMsg_Data := Clusters_WbReq_Data[c];
  GWbMsg_Cluster := c;

  Clusters_WbReq_Cmd[c] := None;
  (* undefine Clusters_WbReq_Data[c]; *)
}



(*------- Murphi rule "43 Global dir receive writeback" -----*)
transition t43 ()
requires { GWbMsg_Cmd = WB }
{
  GDir_Mem := GWbMsg_Data;
  GDir_State := Invld;
  (* undefine GDir_Owner; *)

  GWbMsg_Cmd := None;
  (* undefine GWbMsg_Data; *)
  (* undefine GWbMsg_Cluster; *)
}




(*------- rule "44 Cluster invalidate itself" -----*)
transition t44 (c)
requires { Sort[c] = CId &&
           Clusters_outReq_Cmd[c] = Inv }
{
  Clusters_L1s_State[oc,i] := case
                              | oc = c && Sort[i] = L1Id : Invld
                              (* undefine Clusters_L1s_Data[c,i]; *)
                              | _ : Clusters_L1s_State[oc,i];

  Clusters_L2_State[c] := Invld;
  (* undefine Clusters_L2_Data[c]; *)

  Clusters_inRpy_Cmd[c] := InvAck;
  Clusters_inRpy_Dest[c] := Clusters_outReq_Cluster[c];
  (* undefine Clusters_inRpy_Data[c]; *)

  Clusters_outReq_Cmd[c] := None;
  (* undefine Clusters_outReq_Cluster[c]; *)
}