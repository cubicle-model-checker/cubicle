type t = Idle | Want | Crit | Enter

array P[proc] : t


var L : lock


init (i) { P[i] = Idle }

unsafe(i j) { P[i] = Crit && P[j] = Crit } 

transition want([i])
requires { P[i] = Idle }
{ P[i] := Want }

transition enter([i])
requires { P[i] = Want }
{ acquire(L,i);
  P[i] := Enter }

transition enter_crit([i])
requires { P[i] = Enter }
{ P[i] := Crit }

transition exit([i])
requires { P[i] = Crit }
{ release(L, i);
  P[i] := Idle }