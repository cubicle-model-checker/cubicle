(*
 See the paper A. Carioni, S. Ghilardi, and S. Ranise. MCMT in the Land of Parametrized Timed Automata. In Proc. of VERIFY 10, 2010.


 Lynch-Shavit's mutual exclusion protocol
 See Lynch,Shavit-"Timing-based mutual exclusion". In Proc. of IEEE
 Real-Time Systems Symposium, pages 2-11, 1992.

 This model is a more faithful version of the Lynch-Shavit's algorithm.
 It contains minimum and maximum location time-bounds, and some lemmas
 about mutual exclusion and deadlock-freedom (see Lynch paper for a thorough
 description of the problem)
*)

type location = L1 | L2 | L3 | L4 | L5 | L6 | L7 | L8 | L9

(* 1 = minimum time in a non remainder location *)
(* E = maximum time in a non remainder non pause location *)
var E : real
(* F = minimum time in the pause location *)
var F : real

array PC[proc] : location

(*  clock *)
array Clock[proc] : real

(* v contains the index of the process that wants to enter the critical section *)
var V : proc
var V_valid : bool

(* w is a flag signaling that a process has written variable v *)
var W : bool

(* historical variable recording who put w=true (needed to state paper's property I3) *)
var H : proc
var H_valid : bool

const C : = 1.0

init (x) { Clock[x] = 0.0 && W = False && PC[x]  = L1 && V_valid = False && H_valid = False && 1.0 <= E && 1.0 <= F }

(* ----------------------axioms-------------------------- *)
invariant () { E < 1.0 }
invariant () { F < 1.0 }
(* ------------------------------------------------------ *)

unsafe (z1 z2) { PC[z1] = L7 && PC[z2] = L7 }
unsafe (z1 z2) { E < F && V_valid = True && V = z1 && PC[z1] = L4 && W = True && PC[z2] = L6 }
unsafe (z1) { PC[z1] = L8 && W = False }
unsafe (z1) { E < F && W = False && PC[z1] = L6 }
unsafe (z1) { E < F && W = True && H_valid = True && H = z1 &&
              PC[z1] <> L6 && PC[z1] <> L7 && PC[z1] <> L8 }

(* A'-->B' *)
transition t1 (x)
requires { PC[x] = L1 && V_valid = False }
{
  PC[x] := L2;
  Clock[x] := 0.0;
}

(* B'-->C' *)
transition t2 (x)
requires { PC[x] = L2 && 1.0 <= Clock[x] }
{
  PC[x] := L3;
  Clock[x] := 0.0;
  V_valid := True;
  V := x;
}

(* C'-->A' *)
transition t3 (x)
requires { PC[x] = L3 && V_valid = True && V <> x && F <= Clock[x] }
{
  PC[x] := L1;
}

transition t3_inv (x)
requires { PC[x] = L3 && V_valid = False && F <= Clock[x] }
{
  PC[x] := L1;
}


(* C'-->A *)
transition t4 (x)
requires {PC[x] = L3 && F <= Clock[x] && V_valid = True && V = x }
{
  PC[x] := L4;
  Clock[x] := 0.0;
}


(* A-->B *)
transition t5 (x)
requires { PC[x] = L4 && W = False && 1.0 <= Clock[x] }
{
  PC[x] := L5;
  Clock[x] := 0.0;
}

(* A-->A' *)
transition t6 (x)
requires { PC[x] = L4 && W = True && 1.0 <= Clock[x] }
{
  PC[x] := L1;
}


(* B-->C *)
transition t7 (x)
requires { PC[x] = L5 && 1.0 <= Clock[x] }
{
  PC[x] := L6;
  Clock[x] := 0.0;
  W := True;
  H := x;
  H_valid := True;
}


(* C-->A' *)
transition t8 (x)
requires { PC[x] = L6 && V_valid = True && V <> x && 1.0 <= Clock[x] }
{
  PC[x] := L1;
}

transition t8_inv (x)
requires { PC[x] = L6 && V_valid = False && 1.0 <= Clock[x] }
{
  PC[x] := L1;
}


(* C-->CS *)
transition t9 (x)
requires { PC[x] = L6 && V_valid = True && V = x && 1.0 <= Clock[x] }
{
  PC[x] := L7;
  Clock[x] := 0.0;
}


(* CS-->W *)
transition t10 (x)
requires { PC[x] = L7 && 1.0 <= Clock[x] }
{
  PC[x] := L8;
  Clock[x] := 0.0;
}

(* W-->X *)
transition t11 (x)
requires { PC[x] = L8 && 1.0 <= Clock[x] }
{
  PC[x] := L9;
  Clock[x] := 0.0;
  W := False;
  H_valid := False;
}

(* X-->A' *)
transition t12 (x)
requires { PC[x] = L8 && 1.0 <= Clock[x] }
{
  PC[x] := L1;
  V_valid := False;
}


(* TODO: problem with simplifications of tick (F-M) with ites *)
transition time_elapse ()
requires { 
           forall_other j. ( PC[j] <> L1 && PC[j] <> L3 && Clock[j] + C <= E ||
                             PC[j] = L1 ||
                             PC[j] = L3 ) }
{
  Clock[j] := case | _ : Clock[j] + C;
}
