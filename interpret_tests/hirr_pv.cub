(*HIERARCHICAL PVCOHERENCE PROTOCOL*)

(* time ./cubicle.opt examples/challenges/hirr_pvcoherence.cub -brab 4 -search bfsh -candheur 2 -forward-depth 31
-> safe in 10m13s *)

type l1_cache_state = L1CACHE_I | L1CACHE_S | L1CACHE_O | 
L1CACHE_E | L1CACHE_M | L1CACHE_IS | L1CACHE_IS_I | 
L1CACHE_IM_AD | L1CACHE_IM_A | L1CACHE_IM_D | L1CACHE_MI | 
L1CACHE_OI | L1CACHE_II | L1CACHE_SM_A | L1CACHE_OM_A

type l2_cache_state = L2CACHE_I| L2CACHE_SS| L2CACHE_OTS| 
L2CACHE_M| L2CACHE_MT| L2CACHE_IS| L2CACHE_IM| L2CACHE_MI| 
L2CACHE_SS_MB| L2CACHE_SS_B| L2CACHE_MT_MB| L2CACHE_MT_OB| 
L2CACHE_OTS_MB| L2CACHE_OTS_MTB| L2CACHE_OTS_B

type uni_cmd = UNI_NONE| GETS| GETM| UPGRADE | PUTM | PUTO | 
ACK_PUT
type fwd_req_cmd = FWDREQUEST_NONE | FWD_GETS | FWD_GETM 
type reply_cmd = REPLY_NONE| DATA_REPLY| 
DATA_EXCLUSIVE_REPLY| MEM_ACK| UPGRADE_REPLY

type inv_cmd = INV_NONE | INV | ACK_INV

type unblock_cmd = UNBLOCK_NONE| UNBLOCK| EXCLUSIVE_UNBLOCK
type shwb_cmd =  SHWB_NONE| SHWB 


type sort = Proc | Data


(*------------------------------ Processes ------------------------------*)

array L1_Data[proc] : proc
array L1_State[proc] : l1_cache_state

(*------------------------------ Directory ------------------------------*)

var Dir_State: l2_cache_state
var Dir_Data: proc
var Dir_S_Flag: bool
var Dir_O_Flag: bool
var Dir_O_Pending: bool
var Dir_HeadVld: bool
var Dir_PreHeadPtr: proc
var Dir_HeadPtr: proc
array Dir_ShrSet[proc] : bool
var Dir_GetS_ID: proc
var Dir_GetM_ID: proc


 

(*------------------------------- Memory --------------------------------*)

var MemData : proc
(*var init_data : proc*)

(*------------------------------- Network -------------------------------*)

array UniMsg_Cmd[proc] : uni_cmd
array UniMsg_Proc[proc] : proc
array UniMsg_Data[proc] : proc
var Req_to_Mem_Cmd : uni_cmd
var Req_to_Mem_Data : proc
array InvMsg_Cmd[proc] : inv_cmd

var Unblock_Cmd : unblock_cmd
var Unblock_Src : proc
var Shwb_Cmd : shwb_cmd

var L1L1RpMsg_Cmd : reply_cmd
var L1L1RpMsg_Data: proc
var L1L1RpMsg_Src : proc
var L1L1RpMsg_Dst : proc
var L1L1RpMsg_AckNeeded: bool

var DirL1RpMsg_Cmd : reply_cmd
var DirL1RpMsg_Data: proc
var DirL1RpMsg_Dst : proc

var MemDirRpMsg_Cmd : reply_cmd
var MemDirRpMsg_Data: proc
var Fwd_Req_Cmd : fwd_req_cmd
var Fwd_Req_Dst : proc
var Fwd_Req_Aux : proc



(*-------------------------- Auxiliary variables ------------------------*)

var CurrData : proc 
var PrevData : proc

var Collecting : bool

array Sort[proc] : sort

(*-----------------------------------------------------------------------*)



(*---------------------------- Initial states ---------------------------*)

init (p) {

     L1_State[p]=L1CACHE_I &&
     UniMsg_Cmd[p] = UNI_NONE &&
     Dir_State = L2CACHE_I &&
     InvMsg_Cmd[p] = INV_NONE &&
     Dir_ShrSet[p] = False &&
     Dir_S_Flag = False &&
     Dir_O_Flag = False &&
     Dir_O_Pending = False &&
     Dir_HeadVld = False &&
     (*MemData = init_data &&*)

     L1L1RpMsg_Cmd = REPLY_NONE &&
     L1L1RpMsg_AckNeeded = False &&
     DirL1RpMsg_Cmd = REPLY_NONE &&
     Fwd_Req_Cmd = FWDREQUEST_NONE &&
     Unblock_Cmd = UNBLOCK_NONE &&
     Shwb_Cmd = SHWB_NONE &&
     Req_to_Mem_Cmd = UNI_NONE &&
     MemDirRpMsg_Cmd = REPLY_NONE &&
     
     CurrData = MemData &&
     PrevData = MemData 

     }

(*-----------------------------------------------------------------------*)




(*--------------------------Cache Control property ----------------------*)

unsafe (i j) { L1_State[i] = L1CACHE_M  && 
L1_State[j] = L1CACHE_M }

unsafe (i j) { L1_State[i] = L1CACHE_M  && 
L1_State[j] = L1CACHE_E }

unsafe (i j) { L1_State[i] = L1CACHE_M  && 
L1_State[j] = L1CACHE_S }

unsafe (i j) { L1_State[i] = L1CACHE_E  && 
L1_State[j] = L1CACHE_E }

unsafe (i j) { L1_State[i] = L1CACHE_E  && 
L1_State[j] = L1CACHE_S }


(*--------------------------- Data properties ---------------------------*)

unsafe (p) {L1_State[p] = L1CACHE_M  && 
L1_Data[p] <> CurrData }

unsafe (p) {L1_State[p] = L1CACHE_E  && 
L1_Data[p] <> CurrData }

unsafe (p) {L1_State[p] = L1CACHE_S  && 
L1_Data[p] <> CurrData }


(*-------------------------RULES----------------------------------------*)

transition store_in_m (src d)
requires {Sort[d]=Data && Sort[src]=Proc && 
L1_State[src]=L1CACHE_M}
{
L1_Data[src]:=d;
CurrData:=d;
}

transition store_in_e (src d)
requires {Sort[d]=Data && Sort[src]=Proc && 
L1_State[src]=L1CACHE_E}
{
L1_Data[src]:=d;
CurrData:=d;
}

transition L1Cache_issues_GETS (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_I}
{ 
L1_State[src]:=L1CACHE_IS;
UniMsg_Cmd[src]:=GETS;
}

transition L1Cache_issues_GETM (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_I}
{
L1_State[src]:=L1CACHE_IM_AD;
UniMsg_Cmd[src]:=GETM;
}

transition L1Cache_issues_UPGRADE_in_S (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_S}
{
L1_State[src]:=L1CACHE_SM_A;
UniMsg_Cmd[src]:=UPGRADE;
}

transition L1Cache_issues_UPGRADE_in_O (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_O}
{
L1_State[src]:=L1CACHE_OM_A;
UniMsg_Cmd[src]:=UPGRADE;
}

transition L1Cache_issues_PUTO (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_O}
{
L1_State[src]:=L1CACHE_OI;
UniMsg_Cmd[src]:=PUTO;
UniMsg_Data[src]:=L1_Data[src];
}

transition L1Cache_issues_PUTM (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_M}
{
L1_State[src]:=L1CACHE_MI;
UniMsg_Cmd[src]:=PUTM;
UniMsg_Data[src]:=L1_Data[src];
}

transition L1Cache_issues_PUTE (src)
requires {Sort[src]=Proc && L1_State[src]=L1CACHE_E}
{
L1_State[src]:=L1CACHE_MI;
UniMsg_Cmd[src]:=PUTM;
UniMsg_Data[src]:=L1_Data[src];
}

transition L1_handle_forwarded_gets_in_E (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_E}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_O;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_gets_in_M (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_M}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_O;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_gets_in_O (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_O}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_O;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_gets_in_MI (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_MI}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_OI;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_gets_in_OI (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_OI}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_OI;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_gets_in_OM_A (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETS && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_OM_A}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_getm_in_M (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_M}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_I;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_getm_in_E (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_E}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_I;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_getm_in_O (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_O}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_I;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
L1L1RpMsg_AckNeeded:=True;
}

transition L1_handle_forwarded_getm_in_OM_A (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_OM_A}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_IM_AD;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
L1L1RpMsg_AckNeeded:=True;
}

transition L1_handle_forwarded_getm_in_MI (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_MI}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_I;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
}

transition L1_handle_forwarded_getm_in_OI (dst aux)
requires {Sort[dst]=Proc && Sort[aux]=Proc && 
Fwd_Req_Cmd=FWD_GETM && Fwd_Req_Dst=dst && 
Fwd_Req_Aux = aux && L1_State[dst]=L1CACHE_OI}
{
Fwd_Req_Cmd:=FWDREQUEST_NONE;
L1_State[dst]:=L1CACHE_II;
L1L1RpMsg_Cmd:=DATA_REPLY;
L1L1RpMsg_Src:=dst;
L1L1RpMsg_Dst:=Fwd_Req_Aux;
L1L1RpMsg_Data:=L1_Data[dst];
L1L1RpMsg_AckNeeded:=True;
}

transition L1_handle_inv_request_in_IS (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_IS}
{
InvMsg_Cmd[dst]:=ACK_INV;
L1_State[dst]:=L1CACHE_IS_I;
}

transition L1_handle_inv_request_in_I (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_I}
{
InvMsg_Cmd[dst]:=ACK_INV;
}

transition L1_handle_inv_request_in_IM (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_IM_AD} 
{
InvMsg_Cmd[dst]:=ACK_INV;
}

transition L1_handle_inv_request_in_IS_I (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_IS_I}
{
InvMsg_Cmd[dst]:=ACK_INV;
}

transition L1_handle_inv_request_in_SM_A (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_SM_A}
{
InvMsg_Cmd[dst]:=ACK_INV;
L1_State[dst]:=L1CACHE_IM_AD;
}

transition L1_handle_inv_request_in_OM_A (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_OM_A}
{
InvMsg_Cmd[dst]:=ACK_INV;
L1_State[dst]:=L1CACHE_IM_AD;
}

transition L1_handle_inv_request_in_OI (dst)
requires {Sort[dst]=Proc && InvMsg_Cmd[dst]=INV && 
L1_State[dst]=L1CACHE_OI}
{
InvMsg_Cmd[dst]:=ACK_INV;
L1_State[dst]:=L1CACHE_II;
}

transition L1_handle_data_reply_from_L1_in_IS_I (dst src)
requires {Sort[dst]=Proc && Sort[src]=Proc && 
L1L1RpMsg_Cmd=DATA_REPLY && L1L1RpMsg_Dst=dst && 
L1L1RpMsg_Src=src && L1_State[dst]=L1CACHE_IS_I}
{
L1L1RpMsg_Cmd:=REPLY_NONE;
L1_State[dst]:=L1CACHE_I;
L1_Data[dst]:=L1L1RpMsg_Data;
}

transition L1_handle_data_reply_from_L1_in_IM_AD_AckNdd (dst src)
requires {Sort[dst]=Proc && Sort[src]=Proc && L1L1RpMsg_Cmd=DATA_REPLY && L1L1RpMsg_Dst=dst && L1L1RpMsg_Src=src && 
L1_State[dst]=L1CACHE_IM_AD && L1L1RpMsg_AckNeeded=True}
{
L1L1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=L1L1RpMsg_Data;
L1_State[dst]:=L1CACHE_IM_A;  
L1L1RpMsg_AckNeeded:=False;
}

transition L1_handle_data_reply_from_L1_in_IM_AD_Ack_Not_Ndd (dst src)
requires {Sort[dst]=Proc && Sort[src]=Proc && 
L1L1RpMsg_Cmd=DATA_REPLY && L1L1RpMsg_Dst=dst && 
L1L1RpMsg_Src=src && L1_State[dst]=L1CACHE_IM_AD && 
L1L1RpMsg_AckNeeded<>True}
{
L1L1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=L1L1RpMsg_Data;
L1_State[dst]:=L1CACHE_M;  
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;
}

transition L1_handle_data_reply_from_L1_in_IM_D (dst src)
requires {Sort[dst]=Proc && Sort[src]=Proc && 
L1L1RpMsg_Cmd=DATA_REPLY && L1L1RpMsg_Dst=dst && 
L1L1RpMsg_Src=src && L1_State[dst]=L1CACHE_IM_D}
{
L1L1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=L1L1RpMsg_Data;
L1_State[dst]:=L1CACHE_M;  
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;
}

transition L1_handle_data_reply_from_L1_in_IS (dst src)
requires {Sort[dst]=Proc && Sort[src]=Proc && 
L1L1RpMsg_Cmd=DATA_REPLY && L1L1RpMsg_Dst=dst && 
L1L1RpMsg_Src=src && L1_State[dst]=L1CACHE_IS}
{
L1L1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=L1L1RpMsg_Data;
L1_State[dst]:=L1CACHE_S;  
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;
}

transition L1_handle_data_reply_from_L2_in_IS (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=DATA_REPLY && 
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IS}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=DirL1RpMsg_Data;
L1_State[dst]:=L1CACHE_S;  
}

transition L1_handle_data_reply_from_L2_in_IS_I (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=DATA_REPLY && DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IS_I}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=DirL1RpMsg_Data;
L1_State[dst]:=L1CACHE_I;  
}

transition L1_handle_data_reply_from_L2_in_IM_AD (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=DATA_REPLY && 
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IM_AD}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=DirL1RpMsg_Data;
L1_State[dst]:=L1CACHE_M;
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;  
}

transition L1_handle_data_exclusive_reply_from_L2_in_IS (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=DATA_EXCLUSIVE_REPLY && DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IS}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_Data[dst]:=DirL1RpMsg_Data;
L1_State[dst]:=L1CACHE_E;
Unblock_Cmd:=EXCLUSIVE_UNBLOCK;
Unblock_Src:=dst;  
}

transition L1_handle_upgrade_reply_from_L2_in_SM_A (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=UPGRADE_REPLY && 
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_SM_A}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_State[dst]:=L1CACHE_M;
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;  
}

transition L1_handle_upgrade_reply_from_L2_in_OM_A (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=UPGRADE_REPLY && 
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_OM_A}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_State[dst]:=L1CACHE_M;
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;  
}

transition L1_handle_upgrade_reply_from_L2_in_IM_AD (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=UPGRADE_REPLY && 
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IM_AD}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_State[dst]:=L1CACHE_IM_D;
}

transition L1_handle_upgrade_reply_from_L2_in_IM_A (dst)
requires {Sort[dst]=Proc && DirL1RpMsg_Cmd=UPGRADE_REPLY&&
DirL1RpMsg_Dst=dst && L1_State[dst]=L1CACHE_IM_A}
{
DirL1RpMsg_Cmd:=REPLY_NONE;
L1_State[dst]:=L1CACHE_M;
Unblock_Cmd:=UNBLOCK;
Unblock_Src:=dst;  
}

transition L1_handle_ack_put_in_MI (dst)
requires {Sort[dst]=Proc && UniMsg_Cmd[dst]=ACK_PUT && 
L1_State[dst]=L1CACHE_MI}
{
UniMsg_Cmd[dst]:=UNI_NONE;
L1_State[dst]:=L1CACHE_I;
}

transition L1_handle_ack_put_in_OI (dst)
requires {Sort[dst]=Proc && UniMsg_Cmd[dst]=ACK_PUT && 
L1_State[dst]=L1CACHE_OI}
{
UniMsg_Cmd[dst]:=UNI_NONE;
L1_State[dst]:=L1CACHE_I;
}

transition L1_handle_ack_put_in_II (dst)
requires {Sort[dst]=Proc && UniMsg_Cmd[dst]=ACK_PUT && 
L1_State[dst]=L1CACHE_II}
{
UniMsg_Cmd[dst]:=UNI_NONE;
L1_State[dst]:=L1CACHE_I;
}

(*------------------L2 MESSAGES---------------*)

transition L2Cache_write_back_Data_to_Memory ()
requires {Dir_State=L2CACHE_M}
{
Dir_State:=L2CACHE_MI;
Req_to_Mem_Cmd:=PUTM;
Req_to_Mem_Data:=Dir_Data;
}

transition L2_handle_GETS_in_I (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETS && 
Dir_State=L2CACHE_I}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_State:=L2CACHE_IS;
Dir_GetS_ID:=src; 
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Req_to_Mem_Cmd:=GETS;
}

transition L2_handle_GETS_in_SS (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETS && 
Dir_State=L2CACHE_SS}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_State:=L2CACHE_SS;
Dir_GetS_ID:=src; 
Dir_ShrSet[src]:=True;
DirL1RpMsg_Cmd:=DATA_REPLY;
DirL1RpMsg_Dst:=src;
DirL1RpMsg_Data:=Dir_Data
}

transition L2handle_GETS_in_M (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETS && 
Dir_State=L2CACHE_M}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_GetS_ID:=src; 
Dir_State:=L2CACHE_MT_MB;
DirL1RpMsg_Cmd:=DATA_EXCLUSIVE_REPLY;
DirL1RpMsg_Dst:=src;
DirL1RpMsg_Data:=Dir_Data
}

transition L2_Handle_GETS_in_MT (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETS && 
Dir_State=L2CACHE_MT && 
Dir_HeadVld=True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_State:=L2CACHE_MT_OB;
Dir_GetS_ID:=src;
Dir_ShrSet[src]:=True;
Fwd_Req_Cmd:=FWD_GETS;
Fwd_Req_Dst:=Dir_HeadPtr;
Fwd_Req_Aux:=src;
}

transition L2_Handle_GETS_in_OTS (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETS && 
Dir_State=L2CACHE_OTS && 
Dir_HeadVld=True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_State:=L2CACHE_OTS_B;
Dir_GetS_ID:=src;
Dir_ShrSet[src]:=True;
Fwd_Req_Cmd:=FWD_GETS;
Fwd_Req_Dst:=Dir_HeadPtr;
Fwd_Req_Aux:=src;
}

transition L2_Handle_GETM_in_I (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETM && 
Dir_State=L2CACHE_I}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_State:=L2CACHE_IM;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Req_to_Mem_Cmd:=GETM;
}

transition L2_Handle_GETM_in_SS (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETM && 
Dir_State=L2CACHE_SS}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_State:=L2CACHE_SS_MB;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
InvMsg_Cmd[p] := case
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];
Dir_ShrSet[src]:=False;
}

transition L2_Handle_GETM_in_OTS (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETM && 
Dir_State=L2CACHE_OTS}
{
Dir_ShrSet[src]:=False;
Fwd_Req_Cmd:=FWD_GETM;
Fwd_Req_Aux:=src;
Fwd_Req_Dst:=Dir_HeadPtr; 
PrevData:=CurrData;
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_State:=L2CACHE_OTS_MB;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
InvMsg_Cmd[p] := case
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];
}

transition L2_Handle_GETM_in_M (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETM && 
Dir_State=L2CACHE_M}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_State:=L2CACHE_MT_MB;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
DirL1RpMsg_Cmd:=DATA_REPLY;
DirL1RpMsg_Dst:=src;
DirL1RpMsg_Data:=Dir_Data;
}

transition L2_Handle_GETM_in_MT (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=GETM &&
Dir_State=L2CACHE_MT && Dir_HeadVld=True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_State:=L2CACHE_MT_MB;
Fwd_Req_Cmd:=FWD_GETM;
Fwd_Req_Aux:=src;
Fwd_Req_Dst:=Dir_HeadPtr;
Dir_HeadPtr:=src;
}

transition L2_Handle_UPGRADE_in_SS_SharersAreSrc_Other (src o)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_SS && Dir_ShrSet[src]=True && 
Dir_ShrSet[o]=True && src<>o}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_ShrSet[src]:=False; (*1*)
Dir_S_Flag:=True; (*3*)
Dir_State:=L2CACHE_SS_MB; (*3*)
InvMsg_Cmd[p] := case (*3*)
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];
}

transition L2_Handle_UPGRADE_in_SS_SrcOnlySharer (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_SS && Dir_ShrSet[src]=True &&
forall_other p. Dir_ShrSet[p] = False}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_ShrSet[src]:=False; (*1*)
DirL1RpMsg_Cmd:=UPGRADE_REPLY; (*2*)
Dir_State:=L2CACHE_MT_MB; (*2*)
DirL1RpMsg_Dst:=src; (*2*)
}

transition L2_Handle_UPGRADE_in_SS_SrcNOTSharer (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_SS && Dir_ShrSet[src]<>True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;

Dir_S_Flag:=False; (*4*)
Dir_State:=L2CACHE_SS_MB; (*4*)
InvMsg_Cmd[p] := case (*4*)
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];
}

transition L2_Handle_UPGRADE_in_OTS_ifHdPtrEqSrc (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_OTS && Dir_HeadPtr=src}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_ShrSet[src]:=False;

 
Dir_State:=L2CACHE_OTS_MB;
(*1 starts*)
Dir_O_Flag:=True; 
(*1 ends*)
InvMsg_Cmd[p] := case
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];

}

transition L2_Handle_UPGRADE_in_OTS_elsifSrcNOTSharer (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_OTS && Dir_HeadPtr<>src &&
Dir_ShrSet[src]=True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_ShrSet[src]:=False;

 
Dir_State:=L2CACHE_OTS_MB;
(*2 starts*)
Dir_S_Flag:=True;
Dir_O_Pending:=True; 
Dir_PreHeadPtr:=Dir_HeadPtr; 
(*2 ends*)
InvMsg_Cmd[p] := case
	      	 | p=Dir_HeadPtr: INV
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];
}

transition L2_Handle_UPGRADE_in_OTS_else (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_OTS && Dir_HeadPtr<>src &&
Dir_ShrSet[src]<>True}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_ShrSet[src]:=False;

 
Dir_State:=L2CACHE_OTS_MB;
(*3 starts*)
Fwd_Req_Cmd:=FWD_GETM;
Fwd_Req_Aux:=src;
Fwd_Req_Dst:=Dir_HeadPtr;
(*3 ends*)
InvMsg_Cmd[p] := case
	      	 | Dir_ShrSet[p]=True && p<>src : INV
		 | _ : InvMsg_Cmd[p];

}

transition L2_Handle_UPGRADE_in_M (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=UPGRADE && 
Dir_State=L2CACHE_M}
{
UniMsg_Cmd[src]:=UNI_NONE;
Dir_GetM_ID:=src;
Dir_HeadPtr:=src;
Dir_HeadVld:=True;
Dir_State:=L2CACHE_MT_MB;
DirL1RpMsg_Cmd:=DATA_REPLY;
DirL1RpMsg_Dst:=src;
DirL1RpMsg_Data:=Dir_Data
}

transition L2_Handle_PUTM_in_real_PUTM (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTM && 
Dir_State=L2CACHE_MT && Dir_HeadPtr=src}
{
Dir_HeadVld:=False;
Dir_State:=L2CACHE_M;
UniMsg_Cmd[src]:=ACK_PUT;
Dir_Data:=UniMsg_Data[src];
}

transition L2_Handle_PUTM_in_old_PUTM (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTM && 
Dir_State=L2CACHE_MT && Dir_HeadPtr<>src}
{
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_PUTM_in_other (src) (*I,IS,IM,SS,M,MI,SS_MB*)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTM && 
Dir_State<>L2CACHE_OTS && Dir_State<>L2CACHE_MT &&
Dir_State<>L2CACHE_SS_B && Dir_State<>L2CACHE_MT_MB &&
Dir_State<>L2CACHE_MT_OB && Dir_State<>L2CACHE_OTS_MB &&
Dir_State<>L2CACHE_OTS_MTB && Dir_State<>L2CACHE_OTS_B}
{
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_PUTO_in_real_PUTO (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTO && 
Dir_State=L2CACHE_OTS && Dir_HeadPtr=src}
{
Dir_State:=L2CACHE_SS;
Dir_HeadVld:=False;
Dir_Data:=UniMsg_Data[src];
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_PUTO_in_old_PUTO_MT (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTO && 
Dir_State=L2CACHE_MT && Dir_HeadPtr<>src}
{
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_PUTO_in_old_PUTO_OTS_1 (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTO && 
Dir_State=L2CACHE_OTS && Dir_HeadPtr<>src}
{
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_PUTO_in_old_PUTO_OTS_2 (src)
requires {Sort[src]=Proc && UniMsg_Cmd[src]=PUTO && 
Dir_State<>L2CACHE_OTS && Dir_State<>L2CACHE_MT &&
Dir_State<>L2CACHE_SS_B && Dir_State<>L2CACHE_MT_MB &&
Dir_State<>L2CACHE_MT_OB && Dir_State<>L2CACHE_OTS_MB &&
Dir_State<>L2CACHE_OTS_MTB && Dir_State<>L2CACHE_OTS_B}
{
UniMsg_Cmd[src]:=ACK_PUT;
}

transition L2_Handle_UNBLOCK_in_MT_OB (src)
requires {Sort[src]=Proc && Unblock_Src=src &&
Unblock_Cmd=UNBLOCK && Dir_State=L2CACHE_MT_OB && 
Dir_GetS_ID=src}
{
Unblock_Cmd:=UNBLOCK_NONE;
Dir_State:=L2CACHE_OTS;
}

transition L2_Handle_UNBLOCK_in_MT_MB (src)
requires {Sort[src]=Proc && Unblock_Src=src &&
Unblock_Cmd=UNBLOCK && Dir_State=L2CACHE_MT_MB && 
Dir_GetM_ID=src}
{
Unblock_Cmd:=UNBLOCK_NONE;
Dir_State:=L2CACHE_MT;
}

transition L2_Handle_UNBLOCK_in_OTS_MTB (src)
requires {Sort[src]=Proc && Unblock_Src=src &&
Unblock_Cmd=UNBLOCK && Dir_State=L2CACHE_OTS_MTB && 
Dir_GetM_ID=src}
{
Unblock_Cmd:=UNBLOCK_NONE;
Dir_State:=L2CACHE_MT;
}

transition L2_Handle_UNBLOCK_in_OTS_M (src)
requires {Sort[src]=Proc && Unblock_Src=src &&
Unblock_Cmd=UNBLOCK && Dir_State=L2CACHE_OTS_B && 
Dir_GetS_ID=src}
{
Unblock_Cmd:=UNBLOCK_NONE;
Dir_State:=L2CACHE_OTS;
}

transition L2_Handle_EXCLUSIVE_UNBLOCK (src)
requires {Sort[src]=Proc && Unblock_Src=src &&
Unblock_Cmd=EXCLUSIVE_UNBLOCK && Dir_State=L2CACHE_MT_MB && 
Dir_GetS_ID=src}
{
Unblock_Cmd:=UNBLOCK_NONE;
Dir_State:=L2CACHE_MT;
}

transition L2_Handle_data_reply_from_Memory_in_IS ()
requires {MemDirRpMsg_Cmd=DATA_REPLY && Dir_State=L2CACHE_IS}
{
MemDirRpMsg_Cmd:=REPLY_NONE;
Dir_State:=L2CACHE_MT_MB;
Dir_Data:=MemDirRpMsg_Data;
DirL1RpMsg_Cmd:=DATA_EXCLUSIVE_REPLY;
DirL1RpMsg_Dst:=Dir_GetS_ID;
DirL1RpMsg_Data:=MemDirRpMsg_Data;
}

transition L2_Handle_ack_reply_from_L1_finalAck_NOT_SFlag (src)
requires {Sort[src]=Proc && InvMsg_Cmd[src]=ACK_INV && 
Dir_State=L2CACHE_SS_MB && forall_other p. Dir_ShrSet[p]=False &&
Dir_S_Flag=False}
{
InvMsg_Cmd[src]:=INV_NONE;
Dir_ShrSet[src]:=False;
Dir_State:=L2CACHE_MT_MB; (*1*)
DirL1RpMsg_Cmd:=DATA_REPLY; (*2*)
DirL1RpMsg_Data:=Dir_Data; (*2*)
DirL1RpMsg_Dst:=Dir_GetM_ID;
}

transition L2_Handle_ack_reply_from_L1_finalAck_SFlag (src)
requires {Sort[src]=Proc && InvMsg_Cmd[src]=ACK_INV && 
Dir_State=L2CACHE_SS_MB && forall_other p. Dir_ShrSet[p]=False &&
Dir_S_Flag<>False}
{
InvMsg_Cmd[src]:=INV_NONE;
Dir_ShrSet[src]:=False;
Dir_State:=L2CACHE_MT_MB; (*1*)
DirL1RpMsg_Cmd:=UPGRADE_REPLY; (*3*)
Dir_S_Flag:=False; (*3*)
DirL1RpMsg_Dst:=Dir_GetM_ID;
}

transition L2_Handle_ack_reply_from_L1_NOTfinalAck (src)
requires {Sort[src]=Proc && InvMsg_Cmd[src]=ACK_INV && 
Dir_State=L2CACHE_SS_MB && forall_other p. Dir_ShrSet[p]=False &&
Dir_S_Flag<>False}
{
InvMsg_Cmd[src]:=INV_NONE;
Dir_ShrSet[src]:=False;
DirL1RpMsg_Dst:=Dir_GetM_ID; 
}

(*
transition L2_Handle_ack_reply_from_L1_in_OTS_MB (src) (*return to this*)
requires {Sort[src]=Proc && InvMsg_Cmd[src]=ACK_INV && 
Dir_State=L2CACHE_OTS_MB}
{
InvMsg_Cmd[src]:=INV_NONE; (*base code*)
}
*)

transition Memory_handle_get_requests_GETM () 
requires {Req_to_Mem_Cmd=GETM}
{
Req_to_Mem_Cmd:=UNI_NONE;
MemDirRpMsg_Cmd:=DATA_REPLY; 
MemDirRpMsg_Data:=MemData;
}

transition Memory_handle_get_requests_GETS () 
requires {Req_to_Mem_Cmd=GETS}
{
Req_to_Mem_Cmd:=UNI_NONE;
MemDirRpMsg_Cmd:=DATA_REPLY; 
MemDirRpMsg_Data:=MemData;
}

transition Memory_handle_putm_requests () 
requires {Req_to_Mem_Cmd=PUTM}
{
Req_to_Mem_Cmd:=UNI_NONE;
MemData:=Req_to_Mem_Data;
MemDirRpMsg_Cmd:=MEM_ACK; 
}

