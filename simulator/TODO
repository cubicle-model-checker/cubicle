# TODO

## Model

- Utiliser des structures plutôt que des n-uplets
- Utiliser une structure de donnée non persistante

## Simulateur

- Compiler variable table correctement
- Mettre les unsafe dans le modèle : Donner l'option ou non de les tester
- La trace devrait garder le nb_proc
- Pour avoir un simulateur qui lit une trace : 
		Set la trace
		Set modèle vide
		Se balader dans la trace
- Un appel a step si il existe des états après la ou on est devrait retourner vers ces états. Une fonction tierce "forget future" devrait exister pour supprimer les traces futures.

## Traces

Implémenter la fonction "save trace", qui est une fonction avec la même signature que le modèle 
(de façon a pouvoir être lu par les mêmes programme)
Mais qui n'itère que sur un modèle.

## MyModel

- Créer un module pour le modèle.
- Cacher le type du modèle dans celui ci pour seulement afficher un type "t".
- Avoir un type de modèle qui n'est pas persistant
- Avoir une fonction "create_model"

## SceneLib

- Grid Compositor
- Get hovered proc
- On veut peut être afficher a l'écran les variables 

## Sample scene 

- On veut afficher si la simulation est en pause
- On veut afficher le current step
- Scale le text pour le fit dans les carrés
- Centrer le text
- Afficher constantes & Mat
- print_scene : Afficher les transitions prises avec les arguments

## Compilateur

- Il faudrait un paramètre -o pour spécifier le path
- Mettre le "max_float" dans Simulator.Utils plutôt que dans le cutils
- La plupart du code entre l'écriture des garde et des états unsafe semble aisément factorisable
- Ajouter les unsafe au modèle : 
	Nécéssite de créer une fonction pour créer le modèle correctement plutôt que de le créer dans les transitions

## Petri:

Problème : La librairie Petri peut devenir très complexe. Il peut devenir nécéssaire d'avoir une librairie sur plein de fichiers différents

- Améliorer les boutons: Avoir des boutons permettant d'indiquer si un bouton est cliquable, si la souris est sur un bouton changer sa couleur, ...
-> Les boutons peuvent devenir complexe et on peut penser a l'ajout d'un module Button

Dans un monde idéal : 
- Avoir des flèches qui sont des courbes et plus des droites pour permettre plus de flexibilité
- Centrer automatiquement l'affichage pour permettre de scale facilement OU ALORS permettre un zoom + de se déplacer dans l'espace 
-> Faisable en ajoutant une caméra mais ça complique beaucoup 
- Afficher si la simulation est en pause ainsi que le numéro du step courant
- Ajouter la possibilité d'exporter une trace pour pouvoir la lire plus tard -> Nécéssite une fonctionalité "Save trace" d'un simulateur qui construit un modèle qui lirait cette trace
- Ordonner proprement les procs pour qu'on comprenne bien qui est le nouveau proc

- Menu d'aide en appuyant sur h

## Divers

- Au lieu d'utiliser des triplets partout il serait beaucoup plus cohérent d'utiliser des structures non ?
Notament:
	Pour Model.t

## Traces

- Raise une erreur custom en cas de out of bounds

## TESTER PETRI

- dekker_n

- Hierarchical snoop
