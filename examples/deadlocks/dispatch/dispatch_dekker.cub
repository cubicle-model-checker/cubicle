(*number_procs 3*)

type t = A1 | A2 | A3 | A4 | None
type d = Z | One | Two | Three | Four | Five

type pc = Empty | L2_1 | L2_2 | L2_3 | L3_1 | L3_2 | L3_3 | L4_1 | L4_2 | L4_3 |  L5_1 | L5_2 | L5_3 | L2_1_1


array Cmd[proc] : t
array Data[proc] : d
array PC1[proc] : pc
array PC2[proc] : pc

var C : t
var P : proc

var Sync : bool


var Turn : proc
array Want[proc] : bool
array Crit[proc] : bool


(*invariant (i) { Sync = False && Want[i] = True }*)
(*invariant (i) { Sync = False && Crit[i] = True }*)

init (i) { C = None && Cmd[i] = None && Data[i] = Z && PC1[i] = Empty && PC2[i] = Empty && Sync = False &&
	   Want[i] = False && Crit[i] = False
	  }

(*
init () { C = None && Sync = False &&
          Cmd[#1] = None && Data[#1] = Z && PC1[#1] = Empty && PC2[#1] = Empty &&
	  Cmd[#2] = None && Data[#2] = Z && PC1[#2] = Empty && PC2[#2] = Empty &&
	  Cmd[#3] = None && Data[#3] = Z && PC1[#3] = Empty && PC2[#3] = Empty		  
}
*)

(*unsafe() { Sync = True }*)

(*invariant (i) { Sync = False && Want[i] = True }*)
(*invariant (i) { Sync = False && Crit[i] = True }*)


(*unsafe (z1 z2) { A[z1] = L7 && A[z2] = L7 }*)


unsafe (z1 z2) { Want[z1] = True && Want[z2] = True }


(*unsafe(i) { Cmd[i] = None && Data[i] <> Z }*)

transition choix1(i)
requires { Sync = False && Cmd[i] = None }
{
 Cmd[i] := A1
}


transition choix2(i)
requires { Sync = False && Cmd[i] = None }
{
 Cmd[i] := A2
}


transition choix3(i)
requires { Sync = False && Cmd[i] = None }
{
 Cmd[i] := A3
}


transition choix4(i)
requires { Sync = False && Cmd[i] = None }
{
 Cmd[i] := A4
}


(*
transition data1(i)
requires { PC1[i] <> Empty ||  PC2[i] <> Empty }
{
 Data[i] := One
}


transition data2_1(i)
requires { PC1[i] <> Empty ||  PC2[i] <> Empty }
{
 Data[i] := Two
}

transition data3(i)
requires { PC1[i] <> Empty  ||  PC2[i] <> Empty }
{
 Data[i] := Three
}


transition data4(i)
requires { PC1[i] <> Empty ||  PC2[i] <> Empty }
{
 Data[i] := Four;
}

transition data5(i)
requires { PC1[i] <> Empty  ||  PC2[i] <> Empty }
{
 Data[i] := Five;
}
*)
transition cmd1(i)
requires { Sync = False && Cmd[i] = A1 && C = None }
{
 C := A1;
 Cmd[i] := None;
 P := i;
}


transition cmd2(i)
requires { Sync = False && Cmd[i] = A2 && C = None}
{
 C := A2;
 Cmd[i] := None;
 P := i;
}


transition cmd3(i)
requires { Sync = False && Cmd[i] = A3 && C = None}
{
 C := A3;
 Cmd[i] := None;
 P := i;
}

transition cmd4(i)
requires { Sync = False && Cmd[i] = A4 && C = None}
{
 C := A4;
 Cmd[i] := None;
 P := i;
}

transition process_A1(i)
requires { Sync = False && C = A1 && P = i && PC1[i] = Empty }
{ PC1[i] := L2_1 ; C := None; P := ?;  }


transition process_A2(i)
requires { Sync = False && C = A2 && P = i && PC1[i] = Empty }
{ PC1[i] := L3_1 ; C := None; P := ?; }

transition process_A3(i)
requires { Sync = False && C = A3 && P = i && PC1[i] = Empty }
{ PC1[i] := L4_1 ; C := None; P := ?; }

transition process_A4(i)
requires { Sync = False && C = A4 && P = i && PC1[i] = Empty }
{ PC1[i] := L5_1 ; C := None; P := ?; }

transition seq2_1(i)
requires { Sync = False && PC1[i] = L2_1 }
{ PC1[i] := L2_1_1; }

transition seq2_1_1(i)
requires { Sync = False && PC1[i] = L2_1_1 }
{ PC1[i] := L2_2; }

transition seq2_2(i)
requires { Sync = False && PC1[i] = L2_2 }
{ PC1[i] := Empty;
  PC2[i] := L2_3; }

transition seq2_3(i)
requires { Sync = False && PC2[i] = L2_3 }
{ PC2[i] := Empty; }

transition seq3_1(i)
requires { Sync = False && PC1[i] = L3_1 }
{ PC1[i] := L3_2; }

transition seq3_2(i)
requires { Sync = False && PC1[i] = L3_2 }
{ PC1[i] := Empty;
  PC2[i] := L3_3; }

transition seq3_3(i)
requires { Sync = False && PC2[i] = L3_3 }
{ PC2[i] := Empty; }


transition seq4_1(i)
requires { Sync = False && PC1[i] = L4_1 }
{ PC1[i] := L4_2; }

transition seq4_2(i)
requires { Sync = False && PC1[i] = L4_2 }
{ PC1[i] := Empty;
  PC2[i] := L4_3; }

transition seq4_3(i)
requires { Sync = False && PC2[i] = L4_3 }
{ PC2[i] := Empty; }


transition seq5_1(i)
requires { Sync = False && PC1[i] = L5_1 }
{ PC1[i] := L5_2; }

transition seq5_2(i)
requires { Sync = False && PC1[i] = L5_2 }
{ PC1[i] := Empty;
  PC2[i] := L5_3; }

transition seq5_3(i)
requires { Sync = False && PC2[i] = L5_3 }
{ PC2[i] := Empty; }

transition sync(i j m)
requires {Sync = False && PC2[i] = L5_3 && PC1[j] = L5_1 && PC2[m] = L4_3 && forall_other k. PC2[k] = L5_3}
{ PC2[l] := case | _ : Empty;
  Sync := True } 


transition req (i)
requires { Sync = True && Want[i] = False }
{ Want[i] := True }

transition enter (i)
requires { Sync = True && Want[i]=True && forall_other j. Want[j] = False}
{ Crit[i] := True; }

transition exit (i)
requires { Sync = True && Crit[i] = True }
{ 
  Turn := . ;
  Crit[i] := False; 
  Want[i] := False
}


