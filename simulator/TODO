# TODO

## Model

- Utiliser des structures plutôt que des n-uplets

## Simulateur

- Compiler variable table correctement
- Mettre les unsafe dans le modèle : Donner l'option ou non de les tester
- La trace devrait garder le nb_proc
- Pour avoir un simulateur qui lit une trace : 
		Set la trace
		Set modèle vide
		Se balader dans la trace
- Un appel a step si il existe des états après la ou on est devrait retourner vers ces états. Une fonction tierce "forget future" devrait exister pour supprimer les traces futures.

# MyModel

- Créer un module pour le modèle.
- Cacher le type du modèle dans celui ci pour seulement afficher un type "t".
- Avoir un type de modèle qui n'est pas persistant
- Avoir une fonction "create_model"

## SceneLib

- Grid Compositor
- Get hovered proc
- On veut peut être afficher a l'écran les variables 

## Sample scene 

- On veut afficher si la simulation est en pause
- On veut afficher le current step
- Scale le text pour le fit dans les carrés
- Centrer le text
- Afficher constantes & Mat
- print_scene : Afficher les transitions prises avec les arguments

## Compilateur

- Il faudrait un paramètre -o pour spécifier le path
- Mettre le "max_float" dans Simulator.Utils plutôt que dans le cutils
- La plupart du code entre l'écriture des garde et des états unsafe semble aisément factorisable
- Ajouter les unsafe au modèle : 
	Créer une fonction pour créer le modèle correctement plutôt que de le créer dans les transitions

## Petri:

- Une IntMap est elle finalement bien nécéssaire ? On peut simplement utiliser une Hashmap et demander a l'utilisateur un id...
- Les flèches doivent être restreinte par la taille des square (transition) : On peut approximer avec un rond...
- Mieux centrer l'affichage des procs
- Ordonner proprement les procs pour qu'on comprenne bien qu'il y a un nouveau proc et qui il est
- Centrer automatiquement l'affichage de tout le graphe sur l'image ? Le scale ?
- Ajouter la possibilité de faire pause, step back & step forward dans la librairie, implémenté de base sans aucune intervention
- Avoir une transition de pétri qui représente plusieurs transition du modèle cubicle

## Divers

- Au lieu d'utiliser des triplets partout il serait beaucoup plus cohérent d'utiliser des structures non ?

## Bugs

- Il semblerait que si on remonte dans le simulateur avant la première transition il y ait un problème

## Traces

- Raise une erreur custom en cas de out of bounds

## TESTER PETRI

Trucs qui pourrait être intéréssant a ajouter:
	Texte pour décrire transition
	Transition qui décrit plusieurs transitions cubicle

On voudrait un truc qui vérifie une propriété : Couleur en fonction de si une propriété est vraie ou non


- germanish : On voudait req_share & req_exclusive controllé par des boutons
	
- dekker_n

- Hierarchical snoop
