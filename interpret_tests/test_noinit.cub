type t = A | B | C | D

var X : t
var W : t
var U : t

array Y[proc] : t
array Z[proc] : t

array M[proc,proc] : t
array M1[proc,proc] : t


init() { X = A }


transition t()
{ Z[k] := case | _ : B }

transition t1(i)
requires { Y[i] = A }
{ X := B }

transition t2(i)
requires { Y[i] = A && forall_other j. Y[j] = B }
{ X := B }


transition t3()
{ Z[k] := case | _ : Y[k] }

transition t4(i)
{ Z[i] := Y[i] }

transition t5()
{ W := U}

transition t6()
requires { W = A }
{ U := W }

transition t7()
{ M[i,j] := case | _ : Z[i] }

transition t8()
{ M[i,j] := case | i = j : A
                 | _ : Y[j] }

transition t9()
{ M[i,j] := case | i = j : A
                 | _ : Y[i] }

transition t10()
{ M[i,j] := case | i = j : A
                 | _ : M1[i,j] }

transition t11()
{ U := case | W = C : B | W = A : C}