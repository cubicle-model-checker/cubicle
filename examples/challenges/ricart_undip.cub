type location = Idle | Wait | Use | Exiting | Empty | Req | Ack | Ok


var Timer : real

array State[proc] : location

array Sender[proc] : proc
array Receiver[proc] : proc
array Clock[proc] : real
array Last[proc] : real

const Tick = 1.0
(* axiom : 0  < tick  *)

init (z) { State[z] = Empty && Clock[z] = 0.0 && Last[z] = 0.0 && Timer = 1.0 }

unsafe (z1 z2) { State[z1] = Use && State[z2] = Use }

transition t1 (z)
requires { State[z] = Idle }
{
  Timer := Timer + Tick;
  State[j] := case
    | j = z : Wait
    | State[j] = Empty && Sender[j] = z : Req
		| _ : State[j] ;
  Clock[j] := case
		| j = z : Timer
    | State[j] = Empty && Sender[j] = z : Timer
		| _ : Clock[j] ;
  Last[j]  := case
		| j = z : Timer
		| _ : Last[j] 

}

transition t2 (z other)
requires { State[z] = Wait && 
           State[other] = Ack && Sender[other] = z }
{
  Timer := Timer + Tick;
  State[j] := case
    | j = z : Wait
    | j = other : Ok
		| _ : State[j] ;
  Clock[j] := case
		| j = z : Timer
		| j = other : Timer
		| _ : Clock[j] ;
}


transition t3 (z)
requires { State[z] = Wait && 
           forall_other j. (Sender[j] <> z || State[j] = Ok )}
{
  State[j] := case
            | j = z : Use
            | _ : State[j] ;
}


transition t4a (z)
requires { State[z] = Use }
{
  State[j] := case
            | j = z : Exiting
            | State[j] = Ok && Sender[j] = z : Empty
            | _ : State[j] ;
}


transition t4b (z)
requires { State[z] = Exiting &&
	   forall_other j. (Receiver[j] = z && State[j] = Req) }
{
  Timer := Timer + Tick;
  State[j] := case
            | j = z : Idle
            | _ : State[j] ;
  Clock[j] := case
		| _ : Timer ;
}

transition t5 (z other)
requires { State[z] = Idle &&
           State[other] = Req &&
	   Receiver[other] = z && Clock[other] <= Clock[z] }
{
  Timer := Timer + Tick;
  State[j] := case
            | j = z : Idle
            | j = other : Ack
            | _ : State[j] ;
  Clock[j] := case
            | j = z : Timer
            | j = other : Timer
            | _ : Clock[j] ;
}

transition t6 (z other)
requires { State[z] = Wait  &&
           State[other] = Req &&
	   Receiver[other] = z && Clock[other] < Last[z] }
{
  Timer := Timer + Tick;
  State[j] := case
            | j = z : Wait
            | j = other : Ack
            | _ : State[j] ;
  Clock[j] := case
            | j = z : Timer
            | j = other : Timer
            | _ : Clock[j] ;
}


transition t7 (z other)
requires { State[z] = Wait  &&
           State[other] = Req &&
	   Receiver[other] = z && Clock[other] = Last[z] &&
           Sender[other] < z }
{
  Timer := Timer + Tick;
  State[j] := case
            | j = z : Wait
            | j = other : Ack
            | _ : State[j] ;
  Clock[j] := case
            | j = z : Timer
            | j = other : Timer
            | _ : Clock[j] ;
}
