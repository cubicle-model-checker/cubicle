# TODO

## Simulateur

- Scale le text pour le fit dans les carrés
- Centrer le text
- Afficher constantes & Mat
- print_scene : Afficher les transitions prises avec les arguments 
- Compiler variable table correctement
- Utiliser tableau redimensionnable pour la trace
- Mettre les unsafe dans le modèle : Donner l'option ou non de les tester
- La trace devrait garder le nb_proc
- Pour avoir un simulateur qui lit une trace : 
		Set la trace
		Set modèle vide
		Se balader dans la trace
- Un appel a step si il existe des états après la ou on est devrait retourner vers ces états. Une fonction tierce "forget future" devrait exister pour supprimer les traces futures.

# MyModel

- Créer un module pour le modèle.
- Cacher le type du modèle dans celui ci pour seulement afficher un type "t".
- Avoir une fonction "create_model"

## SceneLib

- Grid Compositor
- Get hovered proc
- On veut peut être afficher a l'écran les variables 

## Sample scene 
- On veut afficher si la simulation est en pause
- On veut afficher le current step

## Compilateur

- Il faudrait un paramètre -o pour spécifier le path
- Mettre le "max_float" dans Simulator.Utils plutôt que dans le cutils
- La plupart du code entre l'écriture des garde et des états unsafe semble aisément factorisable

## Bugs

- Il semblerait que si on remointe dans le simulateur avant la première transition il y ait un problème

## TRACES

Tableau redimensionnable
{
	Array : 
	i : (Ou je suis dans l'array)
}

module T ( X : sig type t)
	type X.t t
		val length 	: X.t -> int			
		val start 	: X.t -> int -> unit (recalibrer position)
		val get : 	: X.t -> X.t				(Récup current elem)
		val next : X.t -> unity
		val position : X.t -> int (récup current position)

## Notes : Réseau de pétri

Ajouter librairie pour faire réseau de pétri
